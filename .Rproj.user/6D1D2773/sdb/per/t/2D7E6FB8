{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(plot3D)\nlibrary(sp)\nlibrary(gstat)\n\nui <- fluidPage(\n  \n  titlePanel(\"Semivariogram Analysis\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      fileInput('file', 'CSV file to upload',\n                accept = c(\n                  'text/csv',\n                  'text/comma-separated-values',\n                  '.csv'\n                )\n      ),\n      selectInput(\"xvar\", \"X coordinate: \", choices = NULL), \n      selectInput(\"yvar\", \"Y coordinate: \", choices = NULL),\n      selectInput(\"pvar\", \"Property: \", choices=NULL),\n      numericInput(\"lagsp\",\"Lag spacing: \", value=NULL),\n      numericInput(\"maxlag\",\"Maximum lag: \", value=NULL)\n    ),\n    \n    mainPanel(\n      plotOutput(\"postmap\"),\n      plotOutput(\"svg\")\n    )\n  )\n)\n\nserver <- function(input, output, session) { # added session for updateSelectInput\n  \n  nndist <- function(xy) {\n    nd <- nrow(xy)\n    nnd <- rep(0,nd)\n    for (i in 1:nd) {\n      dst <- sqrt((xy[,1]-xy[i,1])^2+(xy[,2]-xy[i,2])^2)\n      nnd[i] <- min(dst[dst>0])\n    }\n    return(nnd)\n  }\n  \n  info <- eventReactive(input$file, {\n    inFile <- input$file\n    # Instead # if (is.null(inFile)) ... use \"req\"\n    req(inFile)\n    \n    # Changes in read.table \n    f <- read.csv(inFile$datapath, header = T)\n    vars <- names(f)\n    # Update select input immediately after clicking on the action button. \n    updateSelectInput(session, \"xvar\",\"X coordinate: \", choices = c(\"[NONE]\",vars))\n    updateSelectInput(session, \"yvar\",\"Y coordinate: \", choices = c(\"[NONE]\",vars))\n    updateSelectInput(session, \"pvar\",\"Property: \", choices = c(\"[NONE]\",vars))\n    \n    f\n  })\n  \n  observeEvent( c(input$xvar,input$yvar,input$pvar), {\n    if (!is.null(input$xvar) & input$xvar != \"[NONE]\" &\n        !is.null(input$yvar) & input$yvar != \"[NONE]\" &\n        !is.null(input$pvar) & input$pvar != \"[NONE]\") {\n      f <- info()\n      f <- subset(f, select = c(input$xvar,input$yvar,input$pvar))\n      f <- na.omit(f)\n      dlag <- median(nndist(f))\n      mlag <- 0.5*max(as.vector(dist(f)))\n      updateNumericInput(session,\"lagsp\",\"Lag spacing: \",value=dlag)\n      updateNumericInput(session,\"maxlag\",\"Maximum lag: \",value=mlag)\n    }\n  })\n\n  output$postmap <- renderPlot({\n    if (!is.null(input$xvar) & input$xvar != \"[NONE]\" & !is.null(input$yvar) & input$yvar != \"[NONE]\" & !is.null(input$pvar) & input$pvar != \"[NONE]\" ) {\n      f <- info()\n      f <- subset(f, select = c(input$xvar,input$yvar,input$pvar))\n      scatter2D(f[,1],f[,2],colvar=f[,3],pch=16,asp=1)\n    }\n  })\n  \n  output$svg <- renderPlot({\n    if (!is.null(input$xvar) & input$xvar != \"[NONE]\" &\n        !is.null(input$yvar) & input$yvar != \"[NONE]\" &\n        !is.null(input$pvar) & input$pvar != \"[NONE]\" &\n        !is.null(input$lagsp) & !is.null(input$maxlag) ) {\n      f <- info()\n      f <- subset(f, select = c(input$xvar,input$yvar,input$pvar))\n      f <- na.omit(f)\n      coordinates(f) <- c(input$xvar,input$yvar)\n      form <- formula(paste(input$pvar,\"~1\",sep=\"\"))\n      plot(variogram(form,f,width=input$lagsp,cutoff=input$maxlag))\n    }\n  })\n  \n}\n\nshinyApp(ui, server)",
    "created" : 1494357865117.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3226884866",
    "id" : "2D7E6FB8",
    "lastKnownWriteTime" : 1495137187,
    "last_content_update" : 1495137187147,
    "path" : "C:/gcb/Shinygram/app.R",
    "project_path" : "app.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}